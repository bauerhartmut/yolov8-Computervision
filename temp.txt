from ultralytics import YOLO
import numpy as np
from mss import mss
from PIL import Image, ImageOps
import json
import time
import logging
import multiprocessing
import pytesseract
import re
import object
import Containers

class Vision:
    
    def __init__(self, model):
        self.model = model = YOLO(model, task="detect")
        
    def start_vision(self):

        logging.getLogger('ultralytics').setLevel(logging.WARNING)

        sct = mss()
        monitor = sct.monitors[1]

        labels = self.model.names
        labels = list(labels.values())

        object_dict = {label: "" for label in labels}
    
        while True:
            
            label_count = {label: 0 for label in labels}
            label_dict = {label: [] for label in labels}

            screen = np.array(sct.grab(monitor))

            screen = screen[:, :, :3]

            results = self.model(screen)

            data = {}

            label_objects = {label: "" for label in labels}

            variables = {label: 0 for label in labels}

            try: 
                for label_object in label_objects:

                    with open("label_discribtion.json", "r") as f:
                        json_data = json.load(f)

                    label_objects[label_object] = json_data[label_object]
            except:
                print(f"Die Labels in discribtion.json sind entweder falsch geschrieben oder stimmen nicht mit dem des Models überein. Das sind die gültigen Label: {labels}")

            container_map = self.create_container_map(results=result, label_objects=label_objects)

            for result in results:
                for box in result.boxes:

                    label = self.model.names[int(box.cls)]  
                    coords = box.xyxy[0].tolist()

                    if "Object" in label_objects[label]:

                        obj = object.Object(label=label, coords=coords)

                        objects_inside = self.get_boxes_inside_boundingboxes(coords=coords, results=results)

                        interactions = []
                        textes = []

                        for inside_box in objects_inside:
                            
                            box_label = self.model.names[int(inside_box.cls)]

                            interaction = None
                            text = None

                            if "Interaction" in label_objects[box_label]:

                                interaction = object.Interaction(coords=inside_box.xyxy[0].tolist(), object=obj, interaction_type=1)
                                interactions.append(interaction)
                            
                            if "Text" in label_objects[box_label]:

                                text = object.Text(coords=inside_box.xyxy[0].tolist(), content=self.read_image(coords=self.get_text_from_boundingbox(screen, results, inside_box.xyxy[0].tolist())), object=obj)
                                textes.append(text)
                        
                        obj.set_interactions(interactions=interactions)
                        obj.set_text(text=textes)

                        interaction_data = {}

                        for inter in interactions:

                            interaction_data[inter.get_interaction_type()] = inter.get_coords()

                        text_data = {}

                        for t in textes:

                            text_data[t.get_content()] = t.get_coords()

                        data[f"{obj.get_label()}_{variables[obj.get_label()]}"] = obj.get_coords(), interaction_data, text_data

                        variables[obj.get_label()] += 1

            print(data)

            with open("view_output.json", "w") as f:
                json.dump(data, f, indent=5)



            time.sleep(0.1)
    
    def get_boxes_inside_boundingboxes(self, results, coords):

        boxes = []

        for result in results:
            for box in result.boxes:

                if coords == box.xyxy[0].tolist():
                    continue
                else:
                    x1, y1, x2, y2 = box.xyxy[0]

                    middle_x = (x2 + x1) / 2
                    middle_y = (y2 + y1) / 2

                    if coords[0] <= middle_x <= coords[2] and coords[1] <= middle_y <= coords[3]:
                        boxes.append(box)
        
        return boxes
                            

        
        return return_coords
                            

    def read_image(self, coords=None, image=None):

        pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe' #you need to put the path in to the tesseract install

        sct = mss()
        monitor = sct.monitors[1]

        if coords:
            screen = np.array(sct.grab(monitor))
            coords = [int(x) for x in coords]
            x1, y1, x2, y2 = coords
            try:
               x1 -= 5
               y1 -= 5
               x2 += 5
               y2 += 5
               image = screen[y1:y2, x1:x2]
            except:
                pass
            image = screen[y1:y2, x1:x2]
            image = Image.fromarray(image)
            text = pytesseract.image_to_string(image)
            text = re.sub(r'[^\x00-\x7F]+', '', text)
            text = text.replace('\n', '')
            return text
        
        if image:
            text = pytesseract.image_to_string(image)
            text = re.sub(r'[^\x00-\x7F]+', '', text)
            text = text.replace('\n', '')
            return text    

    def create_container_map(self, results, label_objects):

        i = 0
        con = Containers.Container()

        for result in results:
                for box in result.boxes:

                    label = self.model.names[int(box.cls)]

                    if "Container" in label_objects[label]:

                        obj = object.Object(label=f"label_{i}", coords=box.xyxy[0].tolist())
                        i+=1

                        con_dict = {obj.get_label: con.convert_xyxy_to_xyxyxyxy(obj.get_coords)}

                        con.add_coords_dict(coords_dict=con_dict)

        container_map = con.create_container_map()

        return container_map



class Api:

    def __init__(self) -> None:
        pass

    def get_data(self, label = None):
        with open("view_output.json") as f:
            data = json.load(f)
        
        if not label:
            return data
        else:
            
            new_data = {}

            for key in data:

                if key.split("_")[0] == label:
                    new_data[key] = data[key]
                
                
            return new_data

vision = Vision("Computer_Vision_1.3.0.onnx")
vision.start_vision()
    

